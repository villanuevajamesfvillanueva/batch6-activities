	///////////////////////////////////////////////////////////////////////////////////
        //                                                                               //
        //                                Piece encoding                                 //
        //                                                                               //
        ///////////////////////////////////////////////////////////////////////////////////
        //                                                                               //
        //  emSq, P+, P-, K, N, B, R, Q                      0  0  0    0  0  0  0       //
        //     0,  1,  2, 3, 4, 5, 6, 7                     64 32 16    8  4  2  1       //
        //                                                                               //
        //  w = 8  b = 16                                                                //
        //                                                                               //
        //  wP : P+ | w = 9     0001 | 1000 = 1001           1 & 1 = 1   bitwise AND     //
        //  wK :  K | w = 11    0011 | 1000 = 1011           1 & 0 = 0                   //
        //  wN :  N | w = 12    0100 | 1000 = 1100           0 & 1 = 0                   //
        //  wB :  B | w = 13    0101 | 1000 = 1101           0 & 0 = 0                   //
        //  wR :  R | w = 14    0110 | 1000 = 1110                                       //
        //  wQ :  Q | w = 15    0111 | 1000 = 1111           1 | 1 = 1   bitwise OR      //
        //                                                   1 | 0 = 1                   //
        //  bP : P- | b = 18    00010 | 10000 = 10010        0 | 1 = 1                   //
        //  bK :  K | b = 19    00011 | 10000 = 10011        0 | 0 = 0                   //
        //  bN :  N | b = 20    00100 | 10000 = 10100                                    //
        //  bB :  B | b = 21    00101 | 10000 = 10101                                    //
        //  bR :  R | b = 22    00110 | 10000 = 10110                                    //
        //  bQ :  Q | b = 23    00111 | 10000 = 10111                                    //
        //                                                                               //
        ///////////////////////////////////////////////////////////////////////////////////




Relative values to evaluate the material score of the position.
        
        /* 
            Piece weights array map:
            
                empty square,
                skip 2nd,
                black pawn,
                black king = 0,    for kings are not evaluated, only king captures
                black knight,
                black bishop,
                black rook,
                black queen,
                skip 9th,
                white pawn,
                skip 11th,
                white king = 0,    for kings are not evaluated, only king captures
                white knight,
                white bishop,
                white rook,
                white queen
        */




var move_offsets = [
        
           15,  16,  17,   0,                           // black pawns
          -15, -16, -17,   0,                           // white pawns
            1,  16,  -1, -16,   0,                      // rooks
            1,  16,  -1, -16,  15, -15, 17, -17,  0,    // queens, kings and bishops
           14, -14,  18, -18,  31, -31, 33, -33,  0,    // knights
            3,  -1,  12,  21,  16,   7, 12              /* starting indexes for each piece type in order:
                                                           black pawns, white pawns, kings, knights, bishops, rooks, queens
                                                           
                                                           e.g. piece type is 4 - knight
                                                           move_offset[30] == 0
                                                           move_offset[from 31 to 37] == 3, -1, 12, 21, 16, 7, 12
                                                           so move_offset[30 + type(which is 4 in case of knight)] is 34,
                                                           so at move_offset[34] value is 21 - this is the index where knight
                                                           offsets are starting, so we can loop over knight move offests to
                                                           generate knight moves.
                                                           
                                                        */
        ];


        // 0x88 board + positional scores
var board = [

        22, 20, 21, 23, 19, 21, 20, 22,    0,  0,  5,  5,  0,  0,  5,  0, 
        18, 18, 18, 18, 18, 18, 18, 18,    5,  5,  0,  0,  0,  0,  5,  5,
        0,  0,  0,  0,  0,  0,  0,  0,    5, 10, 15, 20, 20, 15, 10,  5,
        0,  0,  0,  0,  0,  0,  0,  0,    5, 10, 20, 30, 30, 20, 10,  5,    
        0,  0,  0,  0,  0,  0,  0,  0,    5, 10, 20, 30, 30, 20, 10,  5,
        0,  0,  0,  0,  0,  0,  0,  0,    5, 10, 15, 20, 20, 15, 10,  5,
        9,  9,  9,  9,  9,  9,  9,  9,    5,  5,  0,  0,  0,  0,  5,  5,
        14, 12, 13, 15, 11, 13, 12, 14,    0,  0,  5,  5,  0,  0,  5,  0

        ];





var coordinates = [                                          // convert square id to board notation

        "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",     "i8","j8","k8","l8","m8","n8","o8", "p8",
        "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",     "i7","j7","k7","l7","m7","n7","o7", "p7",
        "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",     "i6","j6","k6","l6","m6","n6","o6", "p6",
        "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",     "i5","j5","k5","l5","m5","n5","o5", "p5",
        "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",     "i4","j4","k4","l4","m4","n4","o4", "p4",
        "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",     "i3","j3","k3","l3","m3","n3","o3", "p3",
        "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",     "i2","j2","k2","l2","m2","n2","o2", "p2",
        "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",     "i1","j1","k1","l1","m1","n1","o1", "p1",

        ];

/* indeces = [

         0,   1,   2,   3,   4,   5,   6,   7,      8,   9,  10,  11,  12,  13,  14,  15, 
        16,  17,  18,  19,  20,  21,  22,  23,     24,  25,  26,  27,  28,  29,  30,  31,
        32,  33,  34,  35,  36,  37,  38,  39,     40,  41,  42,  43,  44,  45,  46,  47,
        48,  49,  50,  51,  52,  53,  54,  55,     56,  57,  58,  59,  60,  61,  62,  63,    
        64,  65,  66,  67,  68,  69,  70,  71,     72,  73,  74,  75,  76,  77,  78,  79,
        80,  81,  82,  83,  84,  85,  86,  87,     88,  89,  90,  91,  92,  93,  94,  95,
        96,  97,  98,  99, 100, 101, 102, 103,    104, 105, 106, 107, 108, 109, 110, 111,
       112, 113, 114, 115, 116, 117, 118, 119,    120, 121, 122, 123, 124, 125, 126, 127


        ]       */